<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://cmondorf.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://cmondorf.github.io/blog/" rel="alternate" type="text/html" /><updated>2022-05-31T04:49:21-05:00</updated><id>https://cmondorf.github.io/blog/feed.xml</id><title type="html">Christian Mondorf</title><subtitle>Python, deep learning, languages, teaching and learning</subtitle><entry><title type="html">We need to discuss frustration in learning to code</title><link href="https://cmondorf.github.io/blog/2022/05/31/notes-from-Spring-start-here.html" rel="alternate" type="text/html" title="We need to discuss frustration in learning to code" /><published>2022-05-31T00:00:00-05:00</published><updated>2022-05-31T00:00:00-05:00</updated><id>https://cmondorf.github.io/blog/2022/05/31/notes-from-Spring-start-here</id><author><name></name></author><summary type="html">This first chapter mostly deals with what Spring is: the most used Java framework in the world today. A framework is defined by Spilca as a set of common functionalities that provide structure for creating applications. The idea here is that there is a lot of boilerplate involved in putting an application together, and using a framework saves you a ton of time by allowing you to focus on what makes your application unique rather than having to reinvent the wheel each time. In this chapter Spilca explains the usefulness and vastness of the Spring framework with a good analogy. He asks the reader to imagine buying furniture from Ikea, except instead of getting the components for the piece of furniture you bought, you get all components available. It’s then up to you to select the pieces you need and assemble them correctly. Spring’s usefulness stems from the fact that it supports a vast array of functionality, but the challenge comes from this vastness. Indeed, Spring is better thought of as an ecosystem of frameworks that share certain design concepts and standards and therefor play well together, rather than as a single framework. The main components of this ecosystem are: Spring core: Includes foundational capabilities. Particularly important here are the context and aspects. More on these in later chapters. Spring Model, View, Controller (MVC): This allows you to create web apps that serve HTTP requests. Spring Data Access: provides you with the tools to connect to SQL databases. NB: Spring Data Access is a module of Spring Core and should not be confused with Spring Data which is an independent project in the Spring ecosystem. Spring Testing: provides testing capabilities. Spring Boot: This is a project in the ecosystem that follows the principle of “convention over configuration”. It allows you to quickly spin up an application with common default settings that you can then modify and refine as needed. Spring Core works according to the inversion of control principle. This means that execution is not controlled by the app we write, but rather that the framework controls the app’s components. This is possible by making such components visible to Spring. This is what the spring context does. The actual process of controlling the components is done by intercepting the methods of the app’s instances (which are visible to spring through the context). This is called aspecting and is another foundational capability of Spring Core.</summary></entry><entry><title type="html">Thoughts on Lesson 0 - How to fastai</title><link href="https://cmondorf.github.io/blog/2021/06/01/lesson-0-fastai.html" rel="alternate" type="text/html" title="Thoughts on Lesson 0 - How to fastai" /><published>2021-06-01T00:00:00-05:00</published><updated>2021-06-01T00:00:00-05:00</updated><id>https://cmondorf.github.io/blog/2021/06/01/lesson-0-fastai</id><author><name></name></author><summary type="html">Recently, a new lesson was added to the fast.ai course. This lesson wasn’t added to the end of the lessons already posted, but instead is meant to be seen before the current set of published lessons. In this post I highlight a few key points that struck me as particularly important and noteworthy.</summary></entry><entry><title type="html">You’ve learned the syntax, now level up your coding</title><link href="https://cmondorf.github.io/blog/2018/05/28/level-up-coding-skills.html" rel="alternate" type="text/html" title="You’ve learned the syntax, now level up your coding" /><published>2018-05-28T00:00:00-05:00</published><updated>2018-05-28T00:00:00-05:00</updated><id>https://cmondorf.github.io/blog/2018/05/28/level-up-coding-skills</id><author><name></name></author><summary type="html">So you’ve read a few books, followed a few tutorials, maybe attended a bootcamp. By now you should know the syntax pretty well, but to be able to work comfortably with a language or pass technical interviews you will need to build fluency in it. This is not unlike building virtuosity on a musical instrument, except in this case rather than practicing pieces of music you hack away at coding exercises.</summary></entry><entry><title type="html">Can artificial intelligence rescue threatened languages?</title><link href="https://cmondorf.github.io/blog/2018/03/14/can-AI-rescue-threatened-languages.html" rel="alternate" type="text/html" title="Can artificial intelligence rescue threatened languages?" /><published>2018-03-14T00:00:00-05:00</published><updated>2018-03-14T00:00:00-05:00</updated><id>https://cmondorf.github.io/blog/2018/03/14/can-AI-rescue-threatened-languages</id><author><name></name></author><summary type="html">Will AI and machine translation kill off the drive to learn foreign languages, or will it help save them?</summary></entry><entry><title type="html">Self-driving cars aren’t cars</title><link href="https://cmondorf.github.io/blog/2018/03/08/self-driving-cars-arent-cars.html" rel="alternate" type="text/html" title="Self-driving cars aren’t cars" /><published>2018-03-08T00:00:00-06:00</published><updated>2018-03-08T00:00:00-06:00</updated><id>https://cmondorf.github.io/blog/2018/03/08/self-driving-cars-arent-cars</id><author><name></name></author><summary type="html">It’s hard to know what self-driving cars will be like, but they won’t be cars. The fact that we can only refer to them as such when discussing them says more about how heavily their legacy weighs on our psyche than it does about them. That’s the point I made in a brief Medium post last year.</summary></entry></feed>